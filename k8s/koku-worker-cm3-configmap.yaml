apiVersion: v1
data:
  README: |
    This directory holds simple scripts used for stage or production.

    entrypoint - contains default command used by the Dockerfile
    run_migrations - contains commands to run postgres db migrations for koku
  entrypoint.sh: |
    #!/bin/bash

    set -e
    cd $APP_HOME
    gunicorn koku.wsgi --access-logfile=- --config gunicorn_conf.py --preload
  run_migrations.sh: "#!/bin/bash\n\n# The \"scripts\" dir should be a sibling to the \"koku\" dir that actually contains the app code\nSCRIPT_DIR=\"$(cd \"$(dirname \"$0\")\" && pwd)\"\n_APP_HOME=${APP_HOME:-$(dirname ${SCRIPT_DIR})/koku}\n\ndeclare -i RC=0\ndeclare -i _HAS_MIG=0\ndeclare -a _MIG_OPS=()\n\n_NOOP=\"__NOOP__\"\n\n\narg_check()\n{\n    # Command line args will override _MIGRATION_DIRECTIVE\n    if [[ -n \"$1\" ]] ; then\n        if [[ -n \"$2\" ]] ; then\n            _MIGRATION_DIRECTIVE=\"${1}:${2}\"\n        else\n            _MIGRATION_DIRECTIVE=\"${1}\"\n        fi\n    fi\n}\n\n\nbash_check()\n{\n    local -i _rc=0\n    local -i _chk_ver_major=${1:-4}\n    local -i _chk_ver_minor=${2:-0}\n    local _ver_str=\"\"\n    local -i _ver_major=0\n    local -i _ver_minor=0\n\n    _ver_str=$(LANG=en_US.UTF-8 bash --version | grep -E \"version [0-9]+\\.\" | sed -e 's/.*version //1' -e 's/ .x86.*$//1')\n    _ver_major=${_ver_str%%.*}\n    _ver_str=${_ver_str#*.}\n    _ver_minor=${_ver_str%%.*}\n\n    if [[ ${_ver_major} -ge ${_chk_ver_major} ]] ; then\n        if [[ ${_ver_major} -eq ${_chk_ver_major} ]] ; then\n            if [[ ${_ver_minor} -ge ${_chk_ver_minor} ]] ; then\n                _rc=0\n            else\n                _rc=1\n            fi\n        else\n            _rc=0\n        fi\n    else\n        _rc=1\n    fi\n\n    if [[ $_rc -ne 0 ]] ; then\n        echo \"\U0001F6A8 : ERROR ::  This script uses advanced bash ops. Please upgrade bash to version >= ${_chk_ver_major}.${_chk_ver_minor}\" >&2\n    fi\n\n    return $_rc\n}\n\n\n# This will parse the information in the environment variable _MIGRATION_DIRECTIVE if any\n# The parsed vales will be stored in the associative array _MIG_OPS.\n# It will be indexed by the django app and its value will be the migration target\n# _MIGRATION_DIRECTIVE will be empty or will have the form:\n#     <app>,...\n# or\n#     <app>:<migration>,...\nparse_directive()\n{\n    local _tmp _op\n\n    if [[ -n \"${_MIGRATION_DIRECTIVE}\" ]]; then\n        # Set terminating delimiter to ensure that parsing works correctly\n        if [[ \"${_MIGRATION_DIRECTIVE: -1}\" != ',' ]]; then\n            _tmp=\"${_MIGRATION_DIRECTIVE},\"\n        else\n            _tmp=\"${_MIGRATION_DIRECTIVE}\"\n        fi\n\n        while [[ -n \"${_tmp}\" ]]; do\n            _op=${_tmp%%,*}\n            _tmp=${_tmp#*,}\n\n            # Attempt to detect an empty op (malformed directive)\n            if [[ -z \"${_op}\" ]]; then\n                break\n            fi\n\n            # If the op is app-only, then add a terminating delimiter\n            if [[ ${_op} != *\":\"* ]]; then\n                _op=\"${_op}:\"\n            fi\n\n            # Set the flag to bypass the check if there is a migration specified\n            [[ -n \"${_op#*:}\" ]] && _HAS_MIG=1\n\n            # Store the op in the global array\n            _MIG_OPS+=(\"${_op}\")\n        done\n    else\n        # If there are no directives, mark as NO-OP\n        _MIG_OPS+=(\"${_NOOP}\")\n    fi\n}\n\n\ncheck_migrations()\n{\n    local -i _rc\n\n    # If we have a specific migration, skip the migration check as this could be a downgrade op\n    if [[ $_HAS_MIG -eq 0 ]]; then\n        echo \"\U0001F50E : Checking to see if migrations should be run...\"\n        RESULT=$(python3 ${_APP_HOME}/manage.py check_migrations | tail -1)\n    else\n        RESULT=\"False\"\n    fi\n\n    if [[ \"${RESULT}\" == \"True\" ]]; then\n        echo \"\U0001F44D : Migrations have already been processed\"\n        _rc=1\n    elif [[ \"${RESULT}\" == \"STOP\" ]]; then\n        echo \"\U0001F6D1 : Migrations are verifying or running\"\n        _rc=1  # set to bad exit code in case the image has differences from running image\n    else\n        echo \"\U0001F914 : Migrations should be run\"\n        _rc=0\n    fi\n\n    return $_rc\n}\n\n\nprocess_migrations()\n{\n    local -i _rc\n    local _app _mig\n\n    _rc=0\n\n    if [[ \"${DEVELOPMENT}\" == \"True\" ]]; then\n        export DJANGO_READ_DOT_ENV_FILE=True\n    fi\n\n    for _op in ${_MIG_OPS[@]}; do\n        if [[ ${_op} != \"${_NOOP}\" ]]; then\n            _app=${_op%%:*}\n            _mig=${_op#*:}\n        else\n            _app=\"\"\n            _mig=\"\"\n        fi\n\n        echo \"⌚ : Running Migrations ${_app} ${_mig}\"\n        python3 ${_APP_HOME}/manage.py migrate_schemas ${_app} ${_mig} --executor=multiprocessing\n        _rc=$?\n        if [[ ${_rc} -ne 0 ]]; then\n            echo \"⛔ : ERROR (${_rc}) running migrations ${_app} ${_mig}\" >&2\n            break\n        else\n            echo \"✅ : Migrations complete!\"\n        fi\n    done\n\n    return $_rc\n}\n\n\nexport APPLICATION_NAME=\"koku_db_migration\"\n\n# Check to see if any CLI args will override the env var\narg_check $@\n\n# Check to see if bash is compatible\nif bash_check 4 4\nthen\n    # Parse out the directive into an array of options\n    parse_directive\n\n    # Check to see if migrations should be run\n    if check_migrations\n    then\n        # Execute migrations\n        process_migrations\n        RC=$?\n    else\n        # Ensure that a non-zero code never is forwarded from the check func\n        RC=0\n    fi\nelse\n    # Error out on bash check fail\n    RC=2\nfi\n\nexport APPLICATION_NAME=koku\n\n\nexit $RC\n"
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: koku-worker
  name: koku-worker-cm3
